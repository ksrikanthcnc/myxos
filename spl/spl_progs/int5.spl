//print("-------------------");
//print("In INT 5");
alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo=[physicalSP-1];

alias currentPID S2;
alias currentPCB S3;
alias PPOFTphysical S4;
alias PPOFTindex S5;
alias newPCB S6;
alias PT S7;
alias SWOFTphysical S8;
alias newPID S9;
alias newPTBR S10;
alias MF S11;
alias available S12;
alias DF S13;
alias index S14;
alias page S15;

//Fork()
if(sysCallNo==8)then
//print("FORK");	
	currentPID = (PTBR - 1024) / 8;	
	currentPCB = READY_LIST + 32 * currentPID;
//print("PCB?");	
	newPCB=currentPCB+32;
	if(newPCB>READY_LIST+1024)then
		newPCB=READY_LIST;
	endif;
	while ([newPCB + 1]!=0&&newPCB!=currentPCB) do
		newPCB=newPCB+32;
		if(newPCB>READY_LIST+1024)then
			newPCB=READY_LIST;
		endif;	
	endwhile;
	if(newPCB==currentPCB)then
		//print("full");
		[physicalSP-2]=-1;
		ireturn;
	endif;
//print("PID");
	newPID = (newPCB-READY_LIST)/32;	
	[newPCB+0]=newPID;
	newPTBR=1024+newPID*8;
//---------------------------------------------------------------
//print("MF");
	MF=MEM_LIST+25;
	while([MF]!=0&&MF<MEM_LIST+64)do
		MF=MF+1;
	endwhile;
	if(MF>MEM_LIST+63)then
//===========================================
//print("Fpage-replace");
		PT=PTBR;
		while(1)do
			if(PT>1279)then
				PT=1024;
			endif;
			if([PT+1]=="00")then
				PT=PT+2;
				continue;
			endif;
			if(PT%8==6)then
				//print("stack");
				PT=PT+2;
				continue;
			endif;
			if([MEM_LIST+[PT]]>1)then
				//print("MF>1");
				PT=PT+2;
				continue;
			endif;
			if([PT+1]=="11")then
				//print("11=>01");
				[PT+1]="01";
				PT=PT+2;
				continue;
			endif;
			if([PT+1]=="01")then
				break;
			endif;
			print("boo");
			breakpoint;
//			break;
		endwhile;
		if([PT+1]=="01")then
			//print("swap");
			DF=DISK_LIST+448;
			while(DF<DISK_LIST+512&&[DF]!=0)do
				DF=DF+1;
			endwhile;
			if(DF==DISK_LIST+512)then
				//print("swap-full");
				inline "JMP 11808";
			endif;
			//print("swapping");
			store([PT],DF%512);
			//print("DF");
			[DF]=1;
			//print("free-MF");
			[MEM_LIST+[PT]]=1;
			MF=MEM_LIST+[PT];
			//print("PTBR");
			[PT]=DF%512;
			[PT+1]="00";
		else
			print("boo");
			breakpoint;
		endif;
	endif;

//======================================
	[MF]=1;
//print("stack");
	index=0;
	while(index<512)do
		[(MF%64)*512+index]=[[PTBR+6]*512+index];
		index=index+1;
	endwhile;
	[newPTBR+6]=MF%64;
	[newPTBR+7]="01";
//print("PTBR");
	index=0;
	while(index<6)do
		[newPTBR+index]=[PTBR+index];
		[newPTBR+index+1]=[PTBR+index+1];
		if([PTBR+index+1]=="01"||[PTBR+index+1]=="11")then
			//print("valid");
			[MEM_LIST+[PTBR+index]]=[MEM_LIST+[PTBR+index]]+1;
		endif;
		if([PTBR+index+1]=="00"&&[PTBR+index]>=448)then
			//print("swap");
			[DISK_LIST+[PTBR+index]]=[DISK_LIST+[PTBR+index]]+1;
			store(6,20);
		endif;
	index=index+2;
	endwhile;
//----------------------------------------------------------------
//print("SP");
	[ newPCB + 2 ] = BP;
	[ newPCB + 3 ] = SP-1;
////print("IP");
	[newPCB+4]=[physicalSP];
////print("PTBR");
	[newPCB+5]=newPTBR;
	[newPCB+6]=[currentPCB+6];
	[ newPCB + 7 ] = R0;	
	[ newPCB + 8 ] = R1;	
	[ newPCB + 9 ] = R2;	
	[ newPCB + 10] = R3;	
	[ newPCB + 11] = R4;	
	[ newPCB + 12] = R5;	
	[ newPCB + 13] = R6;	
	[ newPCB + 14] = R7;		
////print("PPOFT");
	SWOFTphysical=FILE_TABLE;
	PPOFTphysical=currentPCB+15;
	index=15;
	while(PPOFTphysical<currentPCB+31)do
		if([PPOFTphysical]!=-1)then
			[SWOFTphysical+[PPOFTphysical]*2+1]=[SWOFTphysical+[PPOFTphysical]*2+1]+1;
			[newPCB+index]=[PPOFTphysical];
			[newPCB+index+1]=[PPOFTphysical+1];
		else
			[newPCB+index]=[PPOFTphysical];
			[newPCB+index+1]=[PPOFTphysical+1];
		endif;
		index=index+2;
		PPOFTphysical=PPOFTphysical+2;
	endwhile;
////print("state");
	[newPCB+1]=1;
	[physicalSP-2]=newPID;
////print("child ret");
alias temp S15;

	temp=[newPCB+3];
	physicalSP = ([newPTBR + 2 * (temp / 512)] * 512) + (temp % 512);
	[physicalSP-1]=-2;
	
//print("parentPID");
	[newPCB+31]=currentPID;
//print("!FORK");

	ireturn;
endif;
