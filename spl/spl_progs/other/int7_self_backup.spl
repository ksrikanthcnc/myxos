print("-------------------");
print("In INT 7");

print("set phySP");
alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias SysCallNo S2;
SysCallNo=[physicalSP-1];

alias FILEphysical S3;
alias SWOFTindex S4;
alias newPCB S5;
alias temp S6;
alias temp2 S7;
alias MF S8;
alias physical S9;
alias PPOFTindex S10;
alias currentPID S11;
alias i S12;
alias nextPCB S13;
alias currentPCB S14;
alias SWOFTphysical S15;

//Exit()
if(SysCallNo==10)then
print("EXIT");
print("halt?");
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
	nextPCB = READY_LIST ;
		
	while(nextPCB<READY_LIST+1024&&[nextPCB+1]!=1&&[nextPCB]<100)do/////////
		nextPCB=nextPCB+32;
	endwhile;
	if(nextPCB>=READY_LIST+1024)then
		print("PCB-0s");
		halt;
	endif;
print("PCB");
	nextPCB = READY_LIST;
	while([nextPCB+1]!=2)do
		nextPCB=nextPCB+32;
	endwhile;
print("files");
	FILEphysical=currentPCB+15;
	while(FILEphysical<currentPCB+31)do
		if([FILEphysical+0]!=-1)then
			SWOFTphysical=1344;
			SWOFTindex=[FILEphysical];
			SWOFTphysical=SWOFTphysical+2*SWOFTindex;
			[SWOFTphysical+1]=[SWOFTphysical+1]-1;
			if([SWOFTphysical+1]==0)then
				[SWOFTphysical]=-1;
			endif;
			[FILEphysical]=-1;
			[FILEphysical+1]=-1;
		endif;
		FILEphysical=FILEphysical+2;
	endwhile;
print("state");
	[currentPCB+1]=0;
print("waiters");	
	temp=READY_LIST;
	while(temp<READY_LIST+1024)do
		if([temp+1]==100+currentPID)then
			[temp+1]=1;
		endif;
		temp=temp+32;
	endwhile;
print("MF");
	MF=1280;
	i=0;
	while(i<5)do
		if([PTBR+2*i]!=-1&&[PTBR+2*i]<64)then
			print("on-disk");
			[MF+[PTBR+2*i]]=[MF+[PTBR+2*i]]-1;
		endif;
		if([PTBR+2*i]>447)then
			print("in-swap");
			[DISK_LIST+[PTBR+2*i]]=[DISK_LIST+[PTBR+2*i]]-1;
			store(6,20);
		endif;
	i=i+1;
	endwhile;
print("PTBR");
	[PTBR+0]=-1;
	[PTBR+1]="00";
	[PTBR+2]=-1;
	[PTBR+3]="00";
	[PTBR+4]=-1;
	[PTBR+5]="00";
	[PTBR+6]=-1;
	[PTBR+7]="00";
print("next");
	newPCB=currentPCB+32;
	if(newPCB>READY_LIST+1024)then
		newPCB=READY_LIST;
	endif;
	while ([newPCB + 1]!=1) do
		newPCB=newPCB+32;
		if(newPCB>READY_LIST+1024)then
			newPCB=READY_LIST;
		endif;	
	endwhile;
print("set PCB");
	[ newPCB + 1 ] = 2;
	BP=[ newPCB + 2 ];
	SP=[ newPCB + 3 ];
	PTBR=[ newPCB + 5 ];
	PTLR=[ newPCB + 6 ];	
	R0=[ newPCB + 7 ];
	R1=[ newPCB + 8 ];
	R2=[ newPCB + 9 ];
	R3=[ newPCB + 10];
	R4=[ newPCB + 11];
	R5=[ newPCB + 12];
	R6=[ newPCB + 13];
	R7=[ newPCB + 14];
	SP = SP + 1;
print("IP"); 
	temp = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
	[ temp ] = [ newPCB + 4 ];
print("!EXIT");
	ireturn;
endif;

if(SysCallNo==13)then
print("wait");
alias WaitingPID S6;
	WaitingPID=[physicalSP-3];
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
	if([READY_LIST+WaitingPID*32]==0)then
		print("PID=0");
		[physicalSP-2]=-1;
		ireturn;
	endif;
	if([READY_LIST+WaitingPID*32]==currentPID)then
		print("PID=self");
		[physicalSP-2]=-1;
		ireturn;
	endif;
	[currentPCB+1]=100+WaitingPID;
print("!wait");
print("jmp next");
	inline "JMP 12270";
endif;

if(SysCallNo==14)then
print("signal");	
	temp=READY_LIST;
	currentPID = (PTBR - 1024) / 8;
	while(temp<READY_LIST+1024)do
		if([temp+1]==100+currentPID)then
			[temp+1]=1;
		endif;
		temp=temp+32;
	endwhile;
print("!sgnal");
ireturn;
endif;
